/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.javala.gittravel;

import java.util.Arrays;

import org.eclipse.jgit.api.errors.GitAPIException;

/** git-travel Main 클래스입니다. 엔트리 클래스입니다. */
public class Main {

    /**
     * git-travel 엔트리 메서드입니다.
     * Package-private 함수인 {@code exec}를 통해 로직을 수행합니다.
     * @param args  커맨드 라인 인자
     */
    public static void main(String[] args) {
        int result = exec(args);
        System.exit(result);
    }

    /** Package-private 엔트리 함수입니다. */
    static int exec(String... args) {
        try {
            Main main = new Main();
            return main.travel(args);
        } catch (UsageException e) {
            System.err.print(e.getMessage());
            return 1;
        } catch(GitAPIException e){
            System.err.print(e.getMessage());
            return 1;
        }
    }

    /**
     * 매개변수를 기반으로 {@link CommandLineOptions} 인스턴스를 생성하고 필드를 정의합니다.
     * 이후 정의된 필드를 기반으로 예외 처리 또는 커맨드를 수행합니다.
     * 
     * @param args  커맨드 라인 인자
     * @return      성공 시 0, 실패 시 1
     * @throws UsageException
     * @throws GitAPIException
     */
    public int travel(String... args) throws UsageException, GitAPIException {
        CommandLineOptions parameters = processArgs(args);
        if(parameters.help()){
            throw new UsageException();
        }
        
        CommandRunner runner = null;
        switch(parameters.commandType()) {
            case INIT: runner = new CommandRunner(new InitCommand(), parameters); break;
            case TRAVEL: runner = new CommandRunner(new TravelCommand(), parameters); break;
            case HERE: runner = new CommandRunner(new HereCommand(), parameters); break;
            case MOVE: runner = new CommandRunner(new MoveCommand(), parameters); break;
            default: return 1;
        }
        
        return runner.run();
    }

    /**
     * {@link CommandLineOptions} 인스턴스 생성 및 예외 처리합니다.
     * 
     * @param args  커맨드 라인 인자
     * @return      필드가 초기화된 {@link CommandLineOptions} 인스턴스
     * @throws UsageException
     */
    public static CommandLineOptions processArgs(String... args) throws UsageException {
        if(0 >= args.length){
            throw new UsageException();
        }

        CommandLineOptions parameters;
        try {
            parameters = CommandLineOptionsParser.parse(Arrays.asList(args));
        } catch (IllegalArgumentException e) {
            throw new UsageException(e.getMessage());
        } catch (Throwable t) {
            t.printStackTrace();
            throw new UsageException(t.getMessage());
        }

        if(parameters.commandType() == CommandType.INIT && (2 < args.length || parameters.travelBack())) {
            throw new UsageException("init [<branch>](Default branch = main | master)");
        }
        if(parameters.commandType() == CommandType.TRAVEL){
            switch(args.length) {
                case 1:
                    break;
                case 2:
                    if(false == parameters.travelBack() && false == args[1].matches("\\d+")){
                        throw new UsageException("travel [-b] [<ncommits(Must be integer)>]");    
                    }
                    break;
                case 3:
                    if(false == parameters.travelBack() || false == args[2].matches("\\d+")){
                        throw new UsageException("travel [-b] [<ncommits(Must be integer)>]");    
                    }
                    break;
                default:
                    throw new UsageException("travel [-b] [<ncommits(Must be integer)>]");
            }
        }
        if(parameters.commandType() == CommandType.MOVE && (2 != args.length || parameters.travelBack())){
            throw new UsageException("move start | last | end | <commitHash>");
        }
        if(parameters.commandType() == CommandType.HERE && (1 != args.length || parameters.travelBack())){
            throw new UsageException("here");
        }

        return parameters;
    }

}
